{"mappings":";;;;;;;;;;;;AAEA;AAGA,qBAAqB;AAErB,SAAS,gCAAU,CAAC,IAAY,EAAE;IAC9B,OAAO,IAAI,CAAC,OAAO,SAAS,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;CAC3C;AAED,eAAe,mCAAa,CAAC,UAAU,EAAE,QAAgB,EAAE;IACvD,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,AAAC;IAC/D,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,kCAAkC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,GAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;CACxH;IAED,wCAkDG,GAlDY,IAAI,CAAA,GAAA,+BAAW,CAAA,CAAC;IAC3B,MAAM,SAAS,EAAC,SAAC,KAAK,CAAA,EAAC,EAA2B;QAC9C,MAAM,MAAM,GAAmB;YAAC,KAAK;SAAC,AAAC;QACvC,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,AAAC;QAEhC,IAAI,QAAQ,CAAC,KAAK,UAAU,EAAE;YAC1B,2CAA2C;YAC3C,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,AAAC;YACnC,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE;gBACtB,MAAM,MAAM,GAAG,gCAAU,CAAC,IAAI,CAAC,AAAC;gBAChC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAClB,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACnB,KAAK,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;gBACvC,sBAAsB;gBACtB,MAAM,QAAQ,GAAG,CAAC;;uCAEK,EAAE,MAAM,CAAC;;gBAEhC,CAAC;gBACD,MAAM,UAAU,GAAG;oBACf,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE,gCAAU,CAAC,QAAQ,CAAC;oBAC7B,SAAS,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC;oBAClC,cAAc,EAAE,QAAQ;iBAC3B;gBACD,aAAa;gBACb,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;aAC1B,MAAM,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE;gBAClD,MAAM,UAAU,GAAG,KAAK,CAAC,EAAE,AAAC;gBAC5B,MAAM,eAAe,GAAG,MAAM,mCAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,AAAC;gBAClE,sBAAsB;gBACtB,MAAM,MAAM,GAAG,CAAC;;uBAET,EAAE,eAAe,CAAC;;;;MAInC,CAAC;gBACS,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,qCAAqC,CAAC,KAAK,EAAE,EAAE,GAAK;oBAC/E,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;iBAC1C,CAAC,AAAC;gBACH,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAC1B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACnB,KAAK,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;aAC1C,MACG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;SAE9C;QACD,OAAO,MAAM,CAAC;KACjB;CACJ,CAAC","sources":["src/transformer.ts"],"sourcesContent":["// noinspection JSUnusedGlobalSymbols\n\nimport {Transformer} from \"@parcel/plugin\";\nimport {MutableAsset} from \"@parcel/types\";\n\n// const styles = [];\n\nfunction trimSource(code: string) {\n    return code.replace(/\\s+/g, ' ').trim();\n}\n\nasync function extractStyles(fileSystem, filePath: string) {\n    const fileSource = await fileSystem.readFile(filePath, 'utf8');\n    return Array.from(fileSource.matchAll(/<style[^>]*>([^<]+)<\\/style>/ig)).flatMap((match) => match[1]).shift().trim();\n}\n\nexport default new Transformer({\n    async transform({asset}): Promise<MutableAsset[]> {\n        const assets: MutableAsset[] = [asset];\n        const filePath = asset.filePath;\n\n        if (filePath.match(/\\.vue$/)) {\n            // console.log(\"Transforming \" + filePath);\n            const code = await asset.getCode();\n            if (asset.type === \"css\") {\n                const source = trimSource(code);\n                asset.setCode(\"\");\n                asset.setMap(null);\n                asset.invalidateOnFileChange(filePath);\n                // language=JavaScript\n                const jsInject = `\n                  const style = document.createElement('style');\n                  style.innerHTML += \\`${source}\\`;\n                  document.head.appendChild(style);\n                `\n                const newJsAsset = {\n                    type: 'js',\n                    content: trimSource(jsInject),\n                    uniqueKey: `${asset.id}-js-styles`,\n                    bundleBehavior: 'inline'\n                }\n                // @ts-ignore\n                assets.push(newJsAsset)\n            } else if (asset.type == \"vue\" || asset.type == \"js\") {\n                const fileSystem = asset.fs;\n                const extractedStyles = await extractStyles(fileSystem, filePath);\n                // language=JavaScript\n                const inject = `setTimeout(() => {\n  const style = document.createElement('style');\n  style.innerHTML += \\`${extractedStyles}\\`;\n  const thisElement = this.$el;\n  const parentElement = thisElement.parentElement\n  parentElement.insertBefore(style, thisElement);\n}, 0);`\n                const codeEdited = code.replace(/mounted\\s*\\(\\)\\s*{\\s*([^}]+)\\s*}/, (match, p1) => {\n                    return `mounted() { ${p1} ${inject} }`;\n                });\n                asset.setCode(codeEdited);\n                asset.setMap(null);\n                asset.invalidateOnFileChange(filePath);\n            } else {\n                console.log(asset.id, asset.type, code)\n            }\n        }\n        return assets;\n    },\n});\n"],"names":[],"version":3,"file":"transformer.js.map","sourceRoot":"../"}