{"mappings":"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","sources":["src/formatting/formatLess.ts","src/extractStyles.ts","src/optimizeCss.ts","src/makeJsToInjectCss.ts","src/formatting/prettierFormatUnsafe.ts","src/formatting/formatJavascript.ts","src/joinJsArray.ts","src/formatting/formatHtml.ts","src/renderLess.ts","src/makeJsToSetAssetIdAttribute.ts","src/processVueAsset.ts","src/readJavaScript.ts","src/trimSource.ts","src/processCssAsset.ts","src/transformer.ts"],"sourcesContent":["import * as prettier from \"prettier\";\n\nexport function formatLess(s: string): string {\n  try {\n    return prettier.format(s, { parser: \"less\" });\n  } catch (error) {\n    try {\n      return prettier.format(s, { parser: \"css\" });\n    } catch (error) {\n      return s;\n    }\n  }\n}\n","import { readFileSync } from \"fs\";\nimport { formatLess } from \"./formatting/formatLess\";\n\nexport async function extractStyles(filePath: string): Promise<{\n  attrs: string,\n  css: string\n} | undefined> {\n  const fileSource: string = readFileSync(filePath, \"utf8\");\n  const regExp = /<style([^>]*)>([^<]+)<\\/style>/ig;\n  return Array.from(fileSource.matchAll(regExp))\n    .map((match: RegExpMatchArray) => {\n      return {\n        attrs: match[1].trim(),\n        css: formatLess(match[2].trim())\n      };\n    }).shift();\n}\n","import { formatLess } from \"./formatting/formatLess\";\nimport less from \"less\";\n\nexport async function optimizeCss(input: string): Promise<string> {\n  let lessContent = formatLess(input);\n  const output = await less.render(lessContent, {\n    compress: true,\n  });\n  return output.css;\n}\n","// noinspection JSFileReferences,JSUnusedGlobalSymbols\n\nexport function makeJsToInjectCss(css: string): string {\n  // language=JavaScript\n  return `\n    setTimeout(() => {\n      const rootElement = findRootElement(this.$el);\n      const style = rootElement.querySelector(\"style\") ?? document.createElement('style');\n      style.innerHTML = \\`${css}\\` + style.innerHTML;\n      rootElement?.appendChild(style);\n    }, 0);\n  `;\n}\n","import { BuiltInParserName, format } from \"prettier\";\n\nexport function prettierFormatUnsafe(s: string, parser: BuiltInParserName) {\n  return format(s, { parser });\n}\n","import { prettierFormatUnsafe } from \"./prettierFormatUnsafe\";\n\nexport function formatJavascript(s: string): string {\n  try {\n    return prettierFormatUnsafe(s, \"typescript\");\n  } catch (_) {\n  }\n  try {\n    return prettierFormatUnsafe(s, \"babel\");\n  } catch (_) {\n  }\n  return s;\n}\n","import { formatJavascript } from \"./formatting/formatJavascript\";\nimport { optimizeJs } from \"./optimizeJs\";\n\nexport function joinJsArray(...jsarray: string[]): string {\n  return Array.from(jsarray).map(formatJavascript).join(\"\\n\");\n}\n","// noinspection JSUnusedGlobalSymbols\n\nimport * as prettier from \"prettier\";\n\nexport function formatHtml(s: string): string {\n  try {\n    const s1 = s.replaceAll(/<[^>]+>/ig, (match) => `${match}\\n`);\n    return prettier.format(s1, { parser: \"html\" });\n  } catch (error) {\n    return s;\n  }\n}\n","import less from \"less\";\n\nexport async function renderLess(lessContent: string, filePath: string): Promise<string> {\n  const output = await less.render(lessContent, {\n    filename: filePath,\n  });\n  return output?.css ?? \"\";\n}\n","// noinspection ThisExpressionReferencesGlobalObjectJS\n\nexport function makeJsToSetAssetIdAttribute(assetId: string): string {\n  // language=JavaScript\n  return `\n    try {\n      thisElement(this).setAttribute(\"data-asset-id\", \"${assetId}\");\n    } catch (e) {\n    }\n  `;\n}\n","import { MutableAsset } from \"@parcel/types\";\nimport { extractStyles } from \"./extractStyles\";\nimport { optimizeCss } from \"./optimizeCss\";\nimport { makeJsToInjectCss } from \"./makeJsToInjectCss\";\nimport { formatJavascript } from \"./formatting/formatJavascript\";\nimport { joinJsArray } from \"./joinJsArray\";\nimport { formatHtml } from \"./formatting/formatHtml\";\nimport { renderLess } from \"./renderLess\";\nimport { readJavaScript } from \"./readJavaScript\";\nimport { makeJsToSetAssetIdAttribute } from \"./makeJsToSetAssetIdAttribute\";\n\nfunction modifyMounted(input: string, inject: string): string {\n  const formattedInput = formatJavascript(input);\n  // safer to format the input before we do anything with it\n  //\n  const s = formattedInput.replace(\n    /mounted((\\s*\\(\\))|(\\W*function\\s*\\(\\)))\\s*[{]\\s*([^}]+\\s*)[}]/g,\n    (\n      match: string,\n      fnSyntax: string,\n      fnSyntaxA: string,\n      fnSyntaxB: string,\n      inner: string\n    ) => `mounted${fnSyntax} {${joinJsArray(inject, inner)}}`);\n  return formatJavascript(s);\n}\n\n// language=JavaScript\nconst processedComment = `/* processed by parcel-transformer-vue-ce */`;\n\nexport async function processVueAsset(asset: MutableAsset) {\n  const code = await asset.getCode() ?? \"\";\n  if (code.includes(processedComment)) {\n    return;\n  }\n  const filePath = asset.filePath;\n  const extractedStyles = await extractStyles(filePath);\n  if (extractedStyles) {\n    const extractedCss = extractedStyles.css;\n    if (extractedCss) {\n      const assetId = asset.id;\n      const scoped = extractedStyles.attrs.split(\" \").includes(\"scoped\");\n      const lessContent = scoped ? `[data-asset-id='${assetId}'] { ${extractedCss} }` : extractedCss;\n      const css = await renderLess(lessContent, filePath);\n      const formattedCss = await optimizeCss(css);\n      const inject = joinJsArray(\n        processedComment,\n        readJavaScript(__dirname + \"/vueInjectJs.ts\"),\n        makeJsToInjectCss(formattedCss),\n        makeJsToSetAssetIdAttribute(assetId)\n      );\n      let edited: string;\n      edited = code.replace(\n        /<script([^>]*)>([^<]+)<\\/script>/ig,\n        (match: string, scriptAttrs: string, inner: string) => {\n          const scriptEdited = modifyMounted(inner, inject);\n          return formatHtml(`<script${scriptAttrs}>${scriptEdited}</script>`);\n        });\n      if (edited != code) {\n        asset.setCode(edited);\n      } else {\n        edited = modifyMounted(code, inject);\n        // edited = await optimizeJs(edited);\n        if (edited != code) {\n          asset.setCode(edited);\n        }\n      }\n      asset.invalidateOnFileChange(filePath);\n    }\n  }\n}\n","import { transpile, ModuleKind, ScriptTarget } from \"typescript\";\nimport { readFileSync } from \"fs\";\n\nexport function readJavaScript(path: string): string {\n  return transpile(readFileSync(path, \"utf8\"), {\n    module: ModuleKind.CommonJS,\n    target: ScriptTarget.ES5\n  });\n}\n","export function trimSource(code?: string): string | undefined {\n  return code?.replace(/\\s+/g, \" \")?.trim();\n}\n","import { MutableAsset } from \"@parcel/types\";\nimport { trimSource } from \"./trimSource\";\n\nexport async function processCssAsset(asset: MutableAsset, assets: MutableAsset[]) {\n  const source = trimSource(await asset.getCode());\n  if (source) {\n    asset.setCode(\"\");\n    asset.setMap(null);\n    const filePath = asset.filePath;\n    asset.invalidateOnFileChange(filePath);\n    // language=JavaScript\n    const jsInject = `\n      const style = document.createElement('style');\n      style.innerHTML += \\`${source}\\`;\n      document.head.appendChild(style);\n    `;\n    const trimSource1 = trimSource(jsInject);\n    if (trimSource1) {\n      const newJsAsset = {\n        type: \"js\",\n        content: trimSource1,\n        uniqueKey: `${asset.id}-js-styles`,\n        bundleBehavior: \"inline\"\n      };\n      // @ts-ignore\n      assets.push(newJsAsset);\n    }\n  }\n}\n","// noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols\n\nimport { Transformer } from \"@parcel/plugin\";\nimport { MutableAsset, Transformer as TransformerOpts } from \"@parcel/types\";\nimport { processVueAsset } from \"./processVueAsset\";\nimport { processCssAsset } from \"./processCssAsset\";\n\ntype T = any;\n\nconst opts: TransformerOpts<T> = {\n  transform: async function({ asset }): Promise<MutableAsset[]> {\n    const assets: MutableAsset[] = [asset];\n    const { filePath, type } = asset;\n    if (filePath.match(/\\.vue$/)) {\n      if (type === \"css\") {\n        await processCssAsset(asset, assets).catch(console.error);\n      }\n      if (type == \"vue\" || type == \"js\") {\n        await processVueAsset(asset).catch(console.error);\n      }\n    }\n    if (filePath.match(/\\.css$/)) {\n      await processCssAsset(asset, assets).catch(console.error);\n    }\n    return assets;\n  }\n};\n\nexport default new Transformer<T>(opts);\n"],"names":["$4ea8550f1d09cca8$export$323c052a84838a30","s","$h0EpZ$prettier","format","parser","error","error1","async","$f0e3f212fc11c628$export$a8ebce4a16084e9f","filePath","fileSource","$h0EpZ$fs","readFileSync","Array","from","matchAll","map","match","attrs","trim","css","shift","$78f54924623a5b43$export$2c4fb1f68c52fac8","input","lessContent","$parcel$interopDefault","$h0EpZ$less","render","compress","$7450369ed860c804$export$8a7d3bd285cfd02f","$81edec093b6f9d33$export$ca6b811302d59844","$ff4022034d1bc7a7$export$96bc6dccfb8b18ba","_","_1","$ad5efbe15a9a40cc$export$9b6b1a214d171659","jsarray","join","$134738c0f6082a81$export$3a8092d2fb888271","s1","replaceAll","$138282779c429f1c$export$75c81e468066bb56","output","filename","ref","$1fe4189ddb3e3d80$export$97d54ee7dfa7a451","assetId","$a27471b9c6190007$var$modifyMounted","inject","formattedInput","replace","fnSyntax","fnSyntaxA","fnSyntaxB","inner","$a27471b9c6190007$export$53a1ac989f826d83","asset","code","getCode","includes","extractedStyles","extractedCss","id","split","formattedCss","path","$a27471b9c6190007$var$$parcel$__dirname","$h0EpZ$typescript","transpile","module","ModuleKind","CommonJS","target","ScriptTarget","ES5","edited","scriptAttrs","setCode","invalidateOnFileChange","$bbb9d1ee13d2b1ed$export$2728e8838df651a5","$bf6abac37793ef4f$export$eafdabe328fdc823","assets","source","setMap","trimSource1","newJsAsset","type","content","uniqueKey","bundleBehavior","push","$31a038fe3039cdac$var$opts","transform","catch","console","$31a038fe3039cdac$export$2e2bcd8739ae039","$h0EpZ$parcelplugin","Transformer"],"version":3,"file":"transformer.js.map","sourceRoot":"../"}